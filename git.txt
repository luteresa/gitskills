1.install git
sudo apt-get install git

2.add user id
$git config --global user.name "Your Name"
$git config --global user.email "email@example.com"
//每个机器都必须带name和email
//git config命令的--global参数，表示这台机器上的所有Git仓库都会使用这个地址

3.create repository
$git init

4.add file
$git add readme.txt

5.commit file
$git commit -m "wrote a readme file"

6.git status命令可以让我们时刻掌握仓库当前的状态
git status

7.查看修改内容
git diff

8.查看历史版本记录
git log  --pretty=oneline

9.回退到上一个版本
git reset --hard HEAD^
上上个:HEAD^^
上N个：HEAD~n

恢复到指定版本
git reset  --hard  99357e7

git reflog：列举历史回退记录，可以查询版本ID号

10.查看工作区和版本库区别
git diff HEAD -- readme.txt

11.撤销修改
1)撤销工作区修改
git checkout -- readme.txt
2)撤销暂存区修改
git reset HEAD readme.txt
git checkout -- readme.txt
3)若没提交到远程版本库，撤销本次提交
git reset   //版本回退

11.删除文件
1)删除
git rm test.txt
git commit -m "remove test.txt"
2)误删:恢复最新版本
git checkout -- test.txt  // "--"不能省，否则变成了切换到另一个分支

12.远程仓库
1)创建SSH Key
home目录下，ssh-keygen -t rsa -C "youremail@example.com"
一路回车会生成id_rsa和id_rsa.pub两个文件
id_rsa是私钥， id_rsa.pub是公钥

登陆githut.com，选择setting/ssh keys/
添加SSH key
把公钥id_ira.pub内容复制过去

2)gitHbu上创建一个仓库，然后把本地仓库与之关联，进行同步
git remote add origin git@github.com:luteresa/testgit.git //关联一个远程库，远程库名字origin
git push -u origin  master    //推送master分支所有内容到远程origin

3)从已经存在的远程仓库克隆
git clone git@github.com:luteresa/gitskills.git
...   //本地代码管理操作
git push -u origin  master  //推送到远程仓库
//加上"-u"参数，Git不但把本地的master分支内容推送到远程的master分支，还会把它们关联起来，以后推送或者拉取时就可以简化命令；
git push origin master


13.过滤不需要提交到仓库的文件
在工作区目录下创建.gitignore文件，提交到仓库则生效
https://github.com/github/gitignore
GitHub做好了很多文件，可以稍加修改拿来用；
如果文件被.gitignore过滤掉，但又确实想添加，可以强制添加
git add -f file.txt

或者发现无法提交，可能是.gitignore写的有问题，可以查询哪个规则写错了
git check-ignore -v file.txt

14.分支
1).查看分支
git branch
2)创建分支
git branch <name>
3)切换分支
git checkout <name>
4)创建+切换分支
git checkout -b <name>
5)合并某分支到当前分支
git merge <name>     //Fast-forward模式合并，就是直接把master指向dev当前提交
6)删除分支
git branch -d <name>

15.解决冲突
1).当出现冲突时
git merge feature1
git status
# On branch master
# Your branch is ahead of 'origin/master' by 2 commits.
#
# Unmerged paths:
#   (use "git add/rm <file>..." as appropriate to mark resolution)
#
#       both modified:      readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")
直接查看readme.txt的内容
Git tracks changes of files.
<<<<<<< HEAD
Creating a new branch is quick & simple.
=======
Creating a new branch is quick AND simple.
>>>>>>> feature1
Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，手动修改后保存。

2).提交
git add test.txt
git commit -m "fonclict fixed"

3).查看分支合并情况
git log --graph --pretty=oneline --abbrev-commit

4).删除feature1分支
git branch -d feature1

16.分支管理策略
用--no-ff 强制禁用Fast forward模式
开发中，一般master分支用来发布版本，而开发工作在各自的dev分支开发并提交，只有稳定版本才合并到master

git merge --no-ff -m "merge with no-ff" dev
这样普通模式合并后，就有历史分支信息，能看出来曾经做过合并；

17.BUG分支
每个Bug都可以通过临时分支来修复，修复后合并分支，然后删除临时分支；
比如接到临时bug任务issue-101, 先将工作现场临时“储藏”起来，修复后，再恢复现场
git stash
这是用git status查看工作区是干净的，因此可以放心创建临时分支
git checkout -b issue-101
在issue-101上修复bug，提交;
git add;
git commit -m "fix bug 101"
修复完成后，切换到master分支，完成合并，删除issue-101分支
git checkout master
git merge --no-ff -m "merged bug fix 101" issue-101
git branch -d issue-101
完成后，切换到工作区继续干活
$ git checkout dev
Switched to branch 'dev'
$ git status
# On branch dev
nothing to commit (working directory clean)

工作区是干净的，恢复储藏代码
git stash list
两种方式恢复：
1)git stash apply;  //恢复工作区内容
git stash drop;     //删除stash内容
2)git pop           //恢复的同时把stash内容删掉

git  stash list 查看

可以多次stash，然后恢复制定stash
 @git stash list
 stash@{0}: WIP on dev: 6224937 add merge

  git stash apply stash@{0}

18.Feature分支
添加定制新功能时，为不影响主干代码，可以建立featurea分支，完成后合并，最后删除feature分支
Feature分支操作与BUG分支类似，当在没有合并之前，if删除，就会丢失掉修改，如果要强行删除，
git branch -D featrue-branch


19.多人协作
1).查看远程库信息，使用git remote -v；
2)本地新建的分支如果不推送到远程，对其他人就是不可见的；
3)从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交
4)在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
5)建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
6)从远程抓取分支，使用git pull，如果有冲突，要先处理冲突

20.标签管理
1)标签与分支类似，只想commit的指针，但是标签不可移动；
2)TAG就是给个容易记的名字，与原来某个commit绑定一定;

3)默认创建标签给HEAD， 也可以指定一个commit
git tab v1.0 
git log --pretty=oneline --abbrev-commit
git tab v0.9 ea7edc2  
git show v0.9

4)可以指定标签信息
git tag -a v0.1 -m "version 0.1 released" 3628164

5)可以用PGP签名标签
git tag -s <tagname> -m "blablabla..."
签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对
git show <tagname>可以看到PGP签名信息
用PGP签名的标签是不可伪造的，因为可以验证PGP签名。

6)修改标签，可以删除
git tag -d v0.1

7)推送标签到远程
git push origin v0.1
一次性推送所有未被推送到远程的标签
git push origin --tags

8)标签已推送远程，删除方法
git tag -d v0.1   //本地删除
git push origin :refs/tags/v0.1  //再push远程删除

21.使用GitHub
1)在GitHub上，可以任意Fork开源仓库;
自己拥有Fork后的仓库的读写权限;
可以推送pull request给官方仓库来贡献代码;
1)
